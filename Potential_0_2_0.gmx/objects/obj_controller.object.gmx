<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_controller</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise variables and objects

//---Game setup---
boardTypes[0] = spr_boardFullEntropy;
boardTypes[1] = spr_boardEndsEntropy;
boardTypes[2] = spr_boardSidesEntropy;

setting[0,0] = "Initial Charge";
setting[0,1] = 4;
setting[1,0] = "Max Charge";
setting[1,1] = 6;
setting[2,0] = "Entropy Type";
setting[2,1] = "Full";

minMaxCharge = 4;
minInitCharge = 2;

maxMaxCharge = 8;
maxInitCharge = 6;

//---Input variables---
//---Variables---
activeButton = noone;

//---Meta---
buildNumber = "0.2.0";
buildYear = string(current_year);

//---Display---
subtitle = "The abstract strategy game of charged particles.";
clickDelay = 5;

//  Set up display functions
base_width = room_width;
base_height = room_height;
width = base_width;
height = base_height;

//  Use this function to clean up anti aliasing
display_reset(4, false);

//---End---
// proceed after initialising variables and key objects
if(room == rm_init) room_goto(rm_start);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///  Start game
room_goto(rm_game);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Restore start button
activeButton.y -= 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step actions

//---Display---
//  Scale room
if (browser_width != width || browser_height != height){
    width = min(base_width, browser_width);
    height = min(base_height, browser_height);
    scr_scaleCanvas(base_width, base_height, width, height, true);
};

//  Display meta and subtitle
txt_smallPrint.copyright = "Copyright Cuddly Cthulhu Creatives " + buildYear + "#All rights reserved";
txt_smallPrint.buildNumber = "Potentital - " + buildNumber;
txt_subtitle.subtitle = subtitle;

//---Settings---
if(room == rm_start){
//  Labels
    var i;
    for(i = 0; i &lt; 3; i++){
        var label = instance_find(txt_label, i);
        label.labelText = setting[i,0];
    };
    if(setting[0,1] &gt; setting[1,1]) set_initCharge.settingValue = setting[1,1] - 1 else set_initCharge.settingValue = setting[0,1];
    set_maxCharge.settingValue = setting[1,1];
    set_boardType.settingValue = setting[2,1];    
};



//---Inputs---

//  Interactions in start room
if(room == rm_start){
    
    //---Interactions with start button---
    if(place_meeting(mouse_x, mouse_y, obj_startButton)){
        //  Set on-hover sprite for button
        obj_startButton.image_index = 1;
        
        //  depress button
        if(mouse_check_button_pressed(mb_left)){
            obj_startButton.y += 5;
        };
        
        //raise button, then wait clickDelay frames before proceeding
        if(mouse_check_button_released(mb_left)){
            activeButton = obj_startButton;
            alarm_set(0, floor(clickDelay / 2));
            alarm_set(1, clickDelay);
        };
    }else{
        obj_startButton.image_index = 0;
    }; 
    
    //---Interactions with settings buttons---
    
    //  When mouse is over any arrow, change that arrow's image index, 
    //      if mouse it not over any arrow, reset the image index of all arrows
    var arrowLeft = instance_place(mouse_x, mouse_y, obj_arrowLeft);
    if(arrowLeft != noone){
        //  Set on-hover sprite for button
        arrowLeft.image_index = 1;
        
        //  depress button
        if(mouse_check_button_pressed(mb_left)){
            arrowLeft.y += 5;
        };
        
        //  raise button  and adjust value
        if(mouse_check_button_released(mb_left)){
            activeButton = arrowLeft;
            alarm_set(0, floor(clickDelay / 2));
            
            //  Set max charge
            if(place_meeting(arrowLeft.x + 160, arrowLeft.y, set_initCharge)){
                if(setting[0,1] &gt; minInitCharge){
                    setting[0,1]--;
                }else{
                setting[0,1] = maxInitCharge;
                };
            };
            
            //  Set init charge
            if(place_meeting(arrowLeft.x + 160, arrowLeft.y, set_maxCharge)){
                if(setting[1,1] &gt; minMaxCharge){
                    setting[1,1]--;
                    }else{
                        setting[1,1] = maxMaxCharge;
                    };
            };
            
            //  Set board type
            if(place_meeting(arrowLeft.x + 160, arrowLeft.y, set_boardType)){
                
            };
        };
    }else{
        with(obj_arrowLeft) image_index = 0;
    };
    
    
};

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
