<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_controller</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set up global variables

//---Game setup---
global.setting[0,0] = "Max Charge";
global.setting[0,1] = 6;
global.setting[1,0] = "Initial Charge";
global.setting[1,1] = floor(global.setting[0,1] / 2);
global.setting[2,0] = "Entropy Type";
global.setting[2,1] = "Full";

//---Meta---
global.buildNumber = "0.2.0";
global.buildYear = string(current_year);

//---Display---
global.subtitle = "The abstract strategy game of charged particles.";
clickDelay = 5;

//  Set up display functions
base_width = room_width;
base_height = room_height;
width = base_width;
height = base_height;

//  Use this function to clean up anti aliasing
display_reset(4, false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Populate settings

if(room == rm_start){
    //  Loop through settings text objects and create labels with their respective setting names
    var i;
    for(i = 0; i &lt; instance_number(txt_setting); i++){
        with(instance_find(txt_setting, i)){
            var label = instance_create(x, y - 128, txt_label);
            label.labelText = global.setting[i,0];    
        };
    };
};
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// proceed after initialising variables and key objects
if(room == rm_init) room_goto(rm_start);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///  Start game
room_goto(rm_game);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Restore start button
obj_startButton.y -= 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Scale room
if (browser_width != width || browser_height != height){
    width = min(base_width, browser_width);
    height = min(base_height, browser_height);
    scr_scaleCanvas(base_width, base_height, width, height, true);
};
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inputs



//  Interactions in start room
if(room == rm_start){
    //  Interactions with start button
    if(place_meeting(mouse_x, mouse_y, obj_startButton)){
        //  Set on-hover sprite for button
        obj_startButton.image_index = 0;
        
        //  depress button
        if(mouse_check_button_pressed(mb_left)){
            obj_startButton.y += 5;
        };
        
        //raise button, then wait clickDelay frames before proceeding
        if(mouse_check_button_released(mb_left)){
            alarm_set(0, floor(clickDelay / 2));
            alarm_set(1, clickDelay);
        };
    }else{
        obj_startButton.image_index = 1;
    };
    
    //  Interactions with settings buttons (right)
    if(place_meeting(mouse_x, mouse_y, obj_arrowRight)){
        var button = instance_place(mouse_x, mouse_y, obj_arrowRight);
        button.image_index = 1;
        if(mouse_check_button_released(mb_left)){
            if(global.setting[instance_number(obj_arrowRight),0] == "Max Charge" &amp;&amp; global.setting[instance_number(obj_arrowRight),1] == 8){
                global.setting[instance_number(obj_arrowRight),1] = 4;
            }else{
                global.setting[instance_number(obj_arrowRight),1]++;
            };
        };
    }else{
        with(obj_arrowRight) image_index = 0;
    };
        
    //  Interactions with settings buttons (left)
    if(place_meeting(mouse_x, mouse_y, obj_arrowLeft)){
        var button = instance_place(mouse_x, mouse_y, obj_arrowLeft);
        button.image_index = 1;
    }else{
        with(obj_arrowLeft) image_index = 0;
    };
    
};




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display Settings
if(room == rm_start){
    //  Loop through settings text objects in room and set their respective values
    var i;
    for(i = 0; i &lt; instance_number(txt_setting); i++){
        with(instance_find(txt_setting, i)){
            settingValue = global.setting[i,1];
        };
    };
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
